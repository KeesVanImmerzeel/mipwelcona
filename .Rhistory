)
return(df)
}
####################################################################################################################
x <- conc_strm_lns %>% dplyr::group_map(
~ .f(
.x,
SL_NR = .y$SL_NR,
times = times,
processes = processes,
alpha = alpha,
rho = rho,
labda = labda,
retard = retard
)
)
conc_strm_lns
dplyr::group_map(
~ .f(
.x,
SL_NR = .y$SL_NR,
times = times,
processes = processes,
alpha = alpha,
rho = rho,
labda = labda,
retard = retard
)
)
###################### Local function definitions ##################################################################
# Function to calculate the cumulative probability or nonexceedance probability of the Pearson Type III
# distribution.
# @param x A real value vector and a vector of parameter values for the distribution specified by type.
#       so x[1]=x; x[2:4]=c(mu, sigma, gamma)
# @return Nonexceedance probability (F) for x.
.p3 <- function(x) {
#print(x)
vec <- c(x[2:4])
x <- x[1]
# Convert a Vector of Parameters to a Parameter Object of a Distribution
p <- lmomco::vec2par(vec, 'pe3')
# cumulative probability or nonexceedance probability of the Pearson Type III distribution given parameters (μ, σ, and γ)
return(lmomco::cdfpe3(x, para = p))
}
# Calculate fraction of each change in concentration on streamline "data" at t using Pearson III (cumulative).
.calc_f <- function(t, data) {
cbind(t, data$TIME, data$sigma, data$gamma) %>% as.matrix() %>% apply(MARGIN = 1, .p3)
}
# Calculate the sum of the product of all fractions (ref. "calc_f") with the changes in concentrations
# on streamline "data". Add to initial concentration (conc0).
.disp_conc <- function(f, data, conc0) {
conc0 + sum(f[2:length(f)] * data$D_CCONC)
}
# Function to add PearsonIII parameters sigma en gamma to conc_strm_lns table (as variables).
# in case the process of dispersion is included.
.addPearsonParameters <-
function(conc_strm_lns,
alpha = 0.3,
rho = 3) {
conc_strm_lns %<>%
dplyr::mutate(b = TIME / rho) %>%
dplyr::mutate(a = DIST * (1 - 1 / rho) / (TIME * 2 * alpha)) %>%
dplyr::mutate(n = DIST * ((1 - 1 / rho) ^ 2) / (2 * alpha)) %>%
dplyr::mutate(sigma = sqrt(n) / a) %>%
dplyr::mutate(gamma = 2 / sqrt(n)) %>%
dplyr::select(-c(a, n))
return(conc_strm_lns)
}
# Calculate the concentrations on streamline "data" (a tibble, ref. \code{\link{mw_init}) at "times" (numeric vector).
#
# @inheritParams mw_conc_streamlines
# @return data frame with the following variables (columns):
# * SL_NR: Streamline number (integer)
# * TIME: Time, days (numeric)
# * CONC: Concentration (numeric)
.f <- function(data,
SL_NR,
times,
processes = c("retardation"),
alpha = 0.3,
rho = 3,
labda = 0.0001,
retard = 1) {
print(SL_NR)
print(data)
if ("retardation" %in% processes) {
data$TIME <- data$TIME / retard
alpha <- alpha / retard
}
if ("dispersion" %in% processes) {
conc <- rep(data$CCONC[1], length(times)) # Concentration at t=0
if (nrow(data) >= 2) {
# More then 2 concentrations in table
flt_data <- data %>% dplyr::filter(TIME > 0)
f <-
purrrlyr::by_row(times %>% as.data.frame(),
.calc_f,
data = flt_data,
.collate = "cols")
conc <-
purrrlyr::by_row(
f %>% as.data.frame(),
.disp_conc,
data = flt_data,
conc = conc[1],
# Concentration at t=0
.collate = "cols"
)
conc <-
conc[, ncol(conc)] %>% as.data.frame() %>% dplyr::rename(CONC = .out)
}
} else {
# Conservative
conc <- stats::approx(
data$TIME,
y = data$CCONC,
xout = times,
method = "constant",
rule = c(2:2)
)$y
}
if ("decay" %in% processes) {
conc <- conc * exp(-labda * times)
}
df <- data.frame(
SL_NR = SL_NR,
TIME = times,
CONC = conc
)
return(df)
}
####################################################################################################################
x <- conc_strm_lns %>% dplyr::group_map(
~ .f(
.x,
SL_NR = .y$SL_NR,
times = times,
processes = processes,
alpha = alpha,
rho = rho,
labda = labda,
retard = retard
)
) %>% dplyr::bind_rows(x)
conc_strm_lns %>% dplyr::group_map(
~ .f(
.x,
SL_NR = .y$SL_NR,
times = times,
processes = processes,
alpha = alpha,
rho = rho,
labda = labda,
retard = retard
)
)
.f
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
conc_l <- mw_example_concentrations()
conc_l_lev <- mw_example_conc_layer_levels()
conc_strm_lns <- mw_init(strm_lns, conc_l_lev, conc_l)
conc_strm_lns
.mw_conc_streamlines(conc_strm_lns, times=c(1*365,5*365,10*365,25*365), processes=c("dispersion","decay", "retardation"), alpha=0.3, rho=3, labda=0.0001, retard=1)
load_all()
library(devtools)
load_all()
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
conc_l <- mw_example_concentrations()
conc_l_lev <- mw_example_conc_layer_levels()
conc_strm_lns <- mw_init(strm_lns, conc_l_lev, conc_l)
x <- .mw_conc_streamlines(conc_strm_lns, times=c(1*365,5*365,10*365,25*365), processes=c("dispersion","decay", "retardation"), alpha=0.3, rho=3, labda=0.0001, retard=1)
x
load_all()
## ONLY RE-CREATE CHECK OBJECT IF THE EXISTING OBJECT IS NOT CORECT (ANYMORE).
fname <-
system.file("extdata", "streamlines.iff", package = "mipwelcona")
chk_mw_read_streamlines <- mw_read_streamlines(fname)
fname <-
system.file("extdata", "well_filters.ipf", package = "mipwelcona")
chk_mw_read_well_filters <- mw_read_well_filters(fname)
chk_sl_fltr_table <- .mw_create_sl_fltr_table(chk_mw_read_streamlines, chk_mw_read_well_filters)
# Read example concentration layer levels (8 rasters layers).
conc_l_lev <- mw_example_conc_layer_levels()
# Read example initial concentrations of different layers in the subsoil (9 raster layers).
conc_l <- mw_example_concentrations()
#Initialize base streamline concentration table.
chk_mw_init <- mw_init(chk_mw_read_streamlines, conc_l_lev, conc_l)
# Calculate concentrations on streamlines at specified times.
chk_mw_conc_streamlines <-
.mw_conc_streamlines(
conc_strm_lns=chk_mw_init,
times = c(0, 1 * 365, 5 * 365, 10 * 365, 25 * 365),
processes = c("dispersion","decay", "retardation"),
alpha = 0.3,
rho = 3,
labda = 0.0001
)
chk_mw_conc_streamlines
load_all()
library(devtools)
load_all()
fname <-
system.file("extdata", "streamlines.iff", package = "mipwelcona")
chk_mw_read_streamlines <- mw_read_streamlines(fname)
fname <-
system.file("extdata", "well_filters.ipf", package = "mipwelcona")
chk_mw_read_well_filters <- mw_read_well_filters(fname)
chk_sl_fltr_table <- .mw_create_sl_fltr_table(chk_mw_read_streamlines, chk_mw_read_well_filters)
# Read example concentration layer levels (8 rasters layers).
conc_l_lev <- mw_example_conc_layer_levels()
# Read example initial concentrations of different layers in the subsoil (9 raster layers).
conc_l <- mw_example_concentrations()
#Initialize base streamline concentration table.
chk_mw_init <- mw_init(chk_mw_read_streamlines, conc_l_lev, conc_l)
# Calculate concentrations on streamlines at specified times.
chk_mw_conc_streamlines <-
.mw_conc_streamlines(
conc_strm_lns=chk_mw_init,
times = c(0, 1 * 365, 5 * 365, 10 * 365, 25 * 365),
processes = c("dispersion","decay", "retardation"),
alpha = 0.3,
rho = 3,
labda = 0.0001
)
chk_mw_read_streamlines
chk_mw_read_well_filters
chk_sl_fltr_table
chk_mw_init
chk_mw_conc_streamlines
usethis::use_data(chk_mw_read_streamlines,
chk_mw_read_well_filters,
chk_sl_fltr_table,
chk_mw_init,
chk_mw_conc_streamlines,
overwrite = TRUE,
internal = TRUE)
document()
library(devtools)
document()
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
# Read well filters.`
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
# Read example initial concentrations of different layers in the subsoil (9 raster layers).
conc_l <- mw_example_concentrations()
# Read example concentration layer levels (8 rasters layers).
conc_l_lev <- mw_example_conc_layer_levels()
#Initialize base streamline concentration table.
conc_strm_lns <- mw_init(strm_lns, conc_l_lev, conc_l)
x <-
.mw_conc_streamlines(
conc_strm_lns=conc_strm_lns,
times = c(0, 1 * 365, 5 * 365, 10 * 365, 25 * 365),
processes = c("dispersion","decay", "retardation"),
alpha = 0.3,
rho = 3,
labda = 0.0001,
retard=1
)
x
library(devtools)
install.packages("rlang")
library(devtools)
install.packages("glue")
library(devtools)
install.packages("cli")
library(devtools)
install.packages("ellipsis")
library(devtools)
install.packages("digest")
library(devtools)
install.packages("pkgbuild")
library(devtools)
install.packages("pkgload")
library(devtools)
fname <-
system.file("extdata", "streamlines.iff", package = "mipwelcona")
chk_mw_read_streamlines <- mw_read_streamlines(fname)
fname <-
system.file("extdata", "well_filters.ipf", package = "mipwelcona")
chk_mw_read_well_filters <- mw_read_well_filters(fname)
chk_sl_fltr_table <- .mw_create_sl_fltr_table(chk_mw_read_streamlines, chk_mw_read_well_filters)
# Read example concentration layer levels (8 rasters layers).
conc_l_lev <- mw_example_conc_layer_levels()
# Read example initial concentrations of different layers in the subsoil (9 raster layers).
conc_l <- mw_example_concentrations()
#Initialize base streamline concentration table.
chk_mw_init <- mw_init(chk_mw_read_streamlines, conc_l_lev, conc_l)
# Calculate concentrations on streamlines at specified times.
chk_mw_conc_streamlines <-
.mw_conc_streamlines(
conc_strm_lns=chk_mw_init,
times = c(0, 1 * 365, 5 * 365, 10 * 365, 25 * 365),
processes = c("dispersion","decay", "retardation"),
alpha = 0.3,
rho = 3,
labda = 0.0001
)
chk_mw_read_streamlines
load_all()
install.packages("dplyr")
load_all()
install.packages("raster")
load_all()
install.packages("rgdal")
load_all()
install.packages("lmomco")
load_all()
install.packages("testthat")
load_all()
fname <-
system.file("extdata", "streamlines.iff", package = "mipwelcona")
chk_mw_read_streamlines <- mw_read_streamlines(fname)
chk_mw_read_streamlines
fname <-
system.file("extdata", "well_filters.ipf", package = "mipwelcona")
chk_mw_read_well_filters <- mw_read_well_filters(fname)
chk_mw_read_well_filters
chk_sl_fltr_table <- .mw_create_sl_fltr_table(chk_mw_read_streamlines, chk_mw_read_well_filters)
chk_sl_fltr_table
chk_mw_conc_streamlines
chk_sl_fltr_table
str(chk_sl_fltr_table)
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
conc_l <- mw_example_concentrations()
conc_l_lev <- mw_example_conc_layer_levels()
conc_strm_lns <- mw_init(strm_lns, conc_l_lev, conc_l)
conc_streamlines <- .mw_conc_streamlines(conc_strm_lns, times=c(1*365,5*365,10*365,25*365), processes=c("dispersion","decay", "retardation"), alpha=0.3, rho=3, labda=0.0001, retard=1)
fname <- system.file("extdata", "well_filters.ipf", package = "mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
sl_fltr_table <- .mw_create_sl_fltr_table(strm_lns, well_fltrs)
.mw_conc_fltr <-
function( fltr_nr, conc_streamlines, well_fltrs, sl_fltr_table ) {
}
x <- .mw_conc_fltr( fltr_nr=1, conc_streamlines, sl_fltr_table)
x <- .mw_conc_fltr( fltr_nr=1, conc_streamlines=chk_mw_conc_streamlines, sl_fltr_table=chk_sl_fltr_table)
chk_mw_conc_streamlines
chk_sl_fltr_table
sl_nrs <-  well_fltrs %>% dplyr::filter( FLTR_NR == fltr_nr)
well_fltrs
fltr_nr <- 1
sl_nrs <-  well_fltrs %>% dplyr::filter( FLTR_NR == fltr_nr)
fltr_nr
sl_nrs
well_fltrs %<>% dplyr::filter( FLTR_NR == fltr_nr)
well_fltrs
well_fltrs <- chk_mw_read_well_filters
fltr_nr <- 1
well_fltrs
well_fltrs %<>% dplyr::filter( FLTR_NR == fltr_nr)
well_fltrs
nrow(well_fltrs)
conc_streamlines <- chk_mw_conc_streamlines
conc_streamlines
head(conc_streamlines)
sl_fltr_table <- chk_sl_fltr_table
sl_fltr_table
head(sl_fltr_table)
sl_fltr_table %<>% dplyr::filter(FLTR_NR == fltr_nr)
sl_fltr_table
nrow(sl_fltr_table)
chk_mw_conc_streamlines
sl_nrs %<>% dplyr::filter(FLTR_NR == fltr_nr) %>% dplyr::select(SL_NR) %>% as.numeric()
head(sl_nrs)
sl_nrs <- sl_fltr_table %>% dplyr::filter(FLTR_NR == fltr_nr) %>% dplyr::select(SL_NR) %>% as.numeric()
sl_nrs <- sl_fltr_table %>% dplyr::filter(FLTR_NR == fltr_nr) %>% dplyr::select(SL_NR)
sl_nrs
str(sl_nrs)
sl_nrs <- sl_fltr_table %>% dplyr::filter(FLTR_NR == fltr_nr) %>% dplyr::select(SL_NR)$SL_NR
?dplyrr::pull()
?dplyr::pull()
sl_nrs <- sl_fltr_table %>% dplyr::filter(FLTR_NR == fltr_nr) %>% dplyr::select(SL_NR) %>% dplyr::pull(1)
sl_nrs
sl_fltr_table
length(sl_nrs)
sl_nrs
well_fltrs
conc_streamlines
str(conc_streamlines)
head(conc_streamlines)
conc_streamlines %<>% dplyr::filter(SL_NR %in% sl_nrs)
conc_streamlines
test <- conc_streamlines %>% dplyr::group_by(TIME) %>% dplyr::mean(CONC)
test <- conc_streamlines %>% dplyr::group_by(TIME) %>% dplyr::summarize(CONC=mean(CONC))
test
?dplyr::summarise()
test <- conc_streamlines %>% dplyr::group_by(TIME) %>% dplyr::summarize(CONC=mean(CONC), .groups="drop")
test()
test <- conc_streamlines %>% dplyr::group_by(TIME) %>% dplyr::summarize(CONC=mean(CONC), .groups="drop")
test
cbind(flt_nr,df)
fltr_nr
cbind(fltr_nr,df)
df <- conc_streamlines %>% dplyr::group_by(TIME) %>% dplyr::summarize(CONC=mean(CONC), .groups="drop")
cbind(fltr_nr,df)
cbind(FLTR_NR=fltr_nr,df)
str(cbind(FLTR_NR=fltr_nr,df))
document()
library(devtools)
document()
document()
load_all()
load_all()
x <- .mw_conc_fltr( fltr_nr=1, sl_fltr_table=chk_sl_fltr_table, conc_streamlines=chk_mw_conc_streamlines)
load_all()
x <- .mw_conc_fltr( fltr_nr=1, sl_fltr_table=chk_sl_fltr_table, conc_streamlines=chk_mw_conc_streamlines)
x
chk_mw_conc_streamlines
fname <-
system.file("extdata", "streamlines.iff", package = "mipwelcona")
chk_mw_read_streamlines <- mw_read_streamlines(fname)
fname <-
system.file("extdata", "well_filters.ipf", package = "mipwelcona")
chk_mw_read_well_filters <- mw_read_well_filters(fname)
chk_sl_fltr_table <- .mw_create_sl_fltr_table(chk_mw_read_streamlines, chk_mw_read_well_filters)
# Read example concentration layer levels (8 rasters layers).
conc_l_lev <- mw_example_conc_layer_levels()
# Read example initial concentrations of different layers in the subsoil (9 raster layers).
conc_l <- mw_example_concentrations()
#Initialize base streamline concentration table.
chk_mw_init <- mw_init(chk_mw_read_streamlines, conc_l_lev, conc_l)
# Calculate concentrations on streamlines at specified times.
chk_mw_conc_streamlines <-
.mw_conc_streamlines(
conc_strm_lns=chk_mw_init,
times = c(0, 1 * 365, 5 * 365, 10 * 365, 25 * 365),
processes = c("dispersion","decay", "retardation"),
alpha = 0.3,
rho = 3,
labda = 0.0001
)
chk_mw_conc_streamlines
library(raster)
?raster
load_all()
library(devtools)
load_all()
x <- mw_example_concentrations()
load_all()
x <- mw_example_concentrations()
fname <-
system.file("extdata", "concentrations.tif", package = "mipwelcona")
fname
x <- raster::raster(fname)
?raster()
x <- raster::raster(fname, crs=sp::CRS("+init=epsg:28992"))
x <- raster::raster(fname)
x <- raster::raster(fname, crs="+init=epsg:4289")
x <- suppressWarnings(raster::raster(fname))
rb <- raster::brick(x, x / 2, x / 4, x / 8, x / 16, x / 32, x / 64, x /
128, x / 256)
load_all()
mw_example_concentrations()
x <- mw_example_concentrations()
x
load_all()
x <- mw_example_conc_layer_levels()
x
library(devtools)
document()
chk_mw_conc_fltr <- .mw_conc_fltr(
fltr_nr = 1,
sl_fltr_table = chk_sl_fltr_table,
conc_streamlines = chk_mw_conc_streamlines
)
chk_mw_conc_fltr
usethis::use_data(chk_mw_read_streamlines,
chk_mw_read_well_filters,
chk_sl_fltr_table,
chk_mw_init,
chk_mw_conc_streamlines,
chk_mw_conc_fltr,
overwrite = TRUE,
internal = TRUE)
library(devtools)
load_all()
x <- .mw_conc_fltr( fltr_nr=1, sl_fltr_table=chk_sl_fltr_table, conc_streamlines=chk_mw_conc_streamlines)
x
x <- .mw_conc_streamlines(conc_strm_lns=chk_mw_init, times=c(1*365,5*365,10*365,25*365), processes=c("dispersion","decay", "retardation"), alpha=0.3, rho=3, labda=0.0001, retard=1)
x
strm_lns
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
x <- mw_init(strm_lns, conc_l_lev=mw_example_conc_layer_levels(), conc_l=mw_example_concentrations())
x
.dist(c(271877.5, 554247.5, 271910, 554210))
particle <- c(X=271877.5, Y=554247.5, Z=-41.237)
.nearest_well_fltr(particle, well_fltrs=chk_mw_read_well_filters, maxdist = 100)
sl_fltr_table <- .mw_create_sl_fltr_table(strm_lns=chk_mw_read_streamlines, well_fltrs=chk_mw_read_well_filters, maxdist=100)
sl_fltr_table
x <- .mw_get_conc_layer_nr(strm_lns=chk_mw_read_streamlines, conc_l_lev=mw_example_conc_layer_levels())
x
x <- .mw_conservative_conc(strm_lns=chk_mw_read_streamlines, conc_l_lev=mw_example_conc_layer_levels(), conc_l=mw_example_concentrations())
x
document()
load_all()
x <- .mw_conc_streamlines(conc_strm_lns=chk_mw_init, times=c(1*365,5*365,10*365,25*365), processes=c("dispersion","decay", "retardation"), alpha=0.3, rho=3, labda=0.0001, retard=1)
x
load_all()
x <- .mw_conc_streamlines(conc_strm_lns=chk_mw_init, times=c(1*365,5*365,10*365,25*365), processes=c("dispersion","decay", "retardation"), alpha=0.3, rho=3, labda=0.0001, retard=1)
x
library(devtools)
load_all()
x <- .mw_conc_streamlines(conc_strm_lns=chk_mw_init, times=c(1*365,5*365,10*365,25*365), processes=c("dispersion","decay", "retardation"), alpha=0.3, rho=3, labda=0.0001, retard=1)
x
x <- .mw_conc_fltr( fltr_nr=1, sl_fltr_table=chk_sl_fltr_table, conc_streamlines=chk_mw_conc_streamlines)
x <- .mw_conc_fltr( fltr_nr=c(1,2), sl_fltr_table=chk_sl_fltr_table, conc_streamlines=chk_mw_conc_streamlines)
x <- .mw_conc_fltr( fltr_nr=1, sl_fltr_table=chk_sl_fltr_table, conc_streamlines=chk_mw_conc_streamlines)
