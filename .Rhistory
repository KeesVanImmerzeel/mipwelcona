well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::mutate(fltr_length=BK_FLTR-OK_FLTR)
well_fltrs %<>% dplyr::filter(BK_FLTR+0.5*fltr_length >= particle[3] &
OK_FLTR-0.5*fltr_length <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
print(well_fltrs)
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
range(test,na.rm=true)
range(test,na.rm=TRUE)
is.na(test)
range(is.na(test))
strm_lns <- mw_read_streamlines(fname)
tail(strm_lns)
X <- strm_lns %>% dplyr::filter(TIME==0) %>% as.matrix()
tail(X)
X
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching (approximately) the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::mutate(fltr_length=BK_FLTR-OK_FLTR)
well_fltrs %<>% dplyr::filter(BK_FLTR+0.5*fltr_length >= particle[3] &
OK_FLTR-0.5*fltr_length <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
test
well_fltrs
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
# Only consider well filters:
#   - matching (approximately) the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::mutate(fltr_length=BK_FLTR-OK_FLTR)
well_fltrs %<>% dplyr::filter(BK_FLTR+0.5*fltr_length >= particle[3] &
OK_FLTR-0.5*fltr_length <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$FLTR_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
head(test,20)
unique(test)
range(is.na(test))
nrow(X)
length(test)
head(X)
fltr_nrs <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
df <- data.frame(SL_NR=X$SL_NR, FLTR_NR=fltr_nrs)
str(x)
str(X)
x
head(X)
X[["SL_NR"]]
X["SL_NR"]
X[,"SL_NR"]
df <- data.frame(SL_NR=X[,"SL_NR"], FLTR_NR=fltr_nrs)
head(df)
tail(df)
unique(strm_lns$SL_NR)
unique(df$SL_NR)
mw_create_sl_fltr_table <- function(strm_lns, well_fltrs){
X <- strm_lns %>% dplyr::filter(TIME==0) %>% as.matrix()
fltr_nrs <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
df <- data.frame(SL_NR=X[,"SL_NR"], FLTR_NR=fltr_nrs)
return(df)
}
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
sl_fltr_table <- mw_create_sl_fltr_table(strm_lns, well_fltrs)
tail(sl_fltr_table)
document()
library(devtools)
load_all()
fname <-
system.file("extdata", "streamlines.iff", package = "mipwelcona")
chk_mw_read_streamlines <- mw_read_streamlines(fname)
fname <-
system.file("extdata", "well_filters.ipf", package = "mipwelcona")
chk_mw_read_well_filters <- mw_read_well_filters(fname)
usethis::use_data(chk_mw_read_streamlines,
chk_mw_read_well_filters,
overwrite = TRUE,
internal = TRUE)
load_all()
library(devtools)
load_all()
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
sl_fltr_table <- mw_create_sl_fltr_table(strm_lns, well_fltrs
)
head(sl_fltr_table)
tail(sl_fltr_table)
chk_sl_fltr_table <- mw_create_sl_fltr_table(chk_mw_read_streamlines, chk_mw_read_well_filters)
head(chk_sl_fltr_table)
tail(chk_sl_fltr_table)
chk_mw_read_streamlines
usethis::use_data(chk_mw_read_streamlines,
chk_mw_read_well_filters,
chk_sl_fltr_table,
overwrite = TRUE,
internal = TRUE)
load_all()
library(devtools)
load_all()
particle <- c(X=271877.5, Y=554247.5, Z=-41.237)
head(chk_mw_read_well_filters)
.nearest_well_fltr(particle, chk_mw_read_well_filters, maxdist = 100)
document()
document()
library(raster)
?raster
?`RasterStack-class`
?stack
setwd("C:/tmp")
library(idf)
?idf
x <- read_raster("WVP_BOT_L1.idf")
plot(x)
x[] <- 1
plot(x)
getwd()
?mipwelcona
library(mipwelcona)
library(devtools)
load_all()
?mipwelcona
x <- mw_read_streamlines("REF1_BAS_BW_9c5m10x_25-jaarszone.iff")
head(x)
range(x$X)
range(x$Y)
library(devtools)
fname <-
system.file("extdata", "concentrations.tif", package = "mipwelcona")
fname
library(devtools)
getwd()
fname <-
system.file("extdata", "concentrations.tif", package = "mipwelcona")
fname
load_all()
fname <-
system.file("extdata", "concentrations.tif", package = "mipwelcona")
fname
use_package("raster")
document()
library(rgdal)
use_package(sp)
use_package("sp")
use_package("rgdal")
load_all()
?mipwelcona
?mw_example_concentrations
b <- mw_example_concentrations()
names(b)
document()
library(mipwelcona)
library(menyanthes)
?menyanthes
library(devtools)
document()
load_all()
?mw_create_sl_fltr_table()
document()
library(devtools)
load_all()
str(mw_example_concentrations())
document()
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
sl_fltr_table <- mw_create_sl_fltr_table(strm_lns, well_fltrs)
head(sl_fltr_table)
load_all()
head(strm_lns)
range(strm_lns$Z)
fname <-
system.file("extdata", "concentrations.tif", package = "mipwelcona")
x1 <- raster::raster(fname)
x1[] <- 0;
x2 <- x1; x2[] <- -10
x3 <- x1; x3[] <- -20
x4 <- x1; x4[] <- -30
x5 <- x1; x5[] <- -40
x6 <- x1; x6[] <- -50
x7 <- x1; x7[] <- -60
x8 <- x1; x8[] <- -70
test <- raster::brick(x1,x2,x3,x4,x5,x6,x7,x8)
names(test)
fname <-
system.file("extdata", "concentrations.tif", package = "mipwelcona")
x1 <- raster::raster(fname)
x1[] <- 0;
names(x1) <- c("level")
x2 <- x1; x2[] <- -10
x3 <- x1; x3[] <- -20
x4 <- x1; x4[] <- -30
x5 <- x1; x5[] <- -40
x6 <- x1; x6[] <- -50
x7 <- x1; x7[] <- -60
x8 <- x1; x8[] <- -70
test <- raster::brick(x1,x2,x3,x4,x5,x6,x7,x8)
names(test)
document()
document()
document()
load_all()
x <- mw_example_conc_layer_levels()
?raster::getValues
?raster::getValues
?cellFrom
?cellFromXY
cellFromXY(object, xy)
strm_lns
strm_lns$X
b <- mw_example_conc_layer_levels()
raster::cellFromXY(b,c(strm_lns$X,strm_lns$Y))
extend(b)
extendt(b)
extent(b)
raster::extend(b)
str(b)
str(b)
raster::extend(b)
?extend()
raster::extend(b[[1]])
plot(b[[1]])
str(b)
names(b)
plot(b["level.2"])
plot(b[["level.2"]])
b <- mw_example_conc_layer_levels()
names(b)
raster::extend(b)
plot(b[["level.2"]])
plot(b)
raster::plot(b[["level.2"]])
range(b[["level.2"]])
raster::extend(b[["level.2"]])
raster::extent(b[["level.2"]])
raster::extent(b)
raster::cellFromX(b,244000)
cellFromX(b,244000)
extract(b,c(244000,530600))
raster::extract(b,c(244000,530600))
raster::extract(b,c(strm_lns$X,strm_lns$Y))
head(raster::extract(b,c(strm_lns$X,strm_lns$Y)))
raster::plot(b[[1]])
str(c(1,2,3))
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y))
conc_l_lev <- mw_example_conc_layer_levels()
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y))
str(x)
head(x)
head(strm_lns)
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y,strm_lns$Z))
str(x)
head(x)
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y))
?which
x <- x[1,]
z <- strm_lns[1,]$Z
x
Z
z
which(x<z)
min(which(x<z))
min(which(x<-1000))
min(which(x<1000))
min(which(x<z))
x
z
x <- x[1,]
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y))
t <- x <- x[1,]
which(t<z)
min(which(t<z))
min(which(t<-1000))
z <- -1000
min(which(t<z))
z <- strm_lns[1,]$Z
min(which(t<z))
t
x
t <- x
min(which(t<z))
min(which(t<-1000))
min(which(t<z))
t
x
t
t <- x
which(t<z)
str(z)
which(t < -1000)
t
is.null(which(t < -1000))
is.na(which(t < -1000))
which(t < -1000)
which(t < x)
which(t<z)
which(t< -1000)
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y))
str(x)
head(x)
which(x < strm_lns$Z)
which(x < strm_lns$Z)
.f <- function(x,z) {
min(which(x<z))
}
head(x)
x <- x[1,]
z
.f(x,z)
?apply
apply(x,1,.f,strm_lns$Z)
dim(x)
head(x)
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y))
head(x)
apply(x,1,.f,strm_lns$Z)
test <- apply(x,1,.f,z=strm_lns$Z)
warnings()
test <- apply(x,1,.f,strm_lns$Z)
head(test)
tail(test)
range(test,na.rm=TRUE)
range(strm_lns$Z)
?mapply
mapply(.f, x, z=strm_lns$Z, USE.NAMES=FALSE)
str(x)
head(x)
.f <- function(x,z) {
print(x)
min(which(x<z))
}
apply(x,1,.f,z=strm_lns$Z)
.f <- function(x,z) {
print(z)
min(which(x<z))
}
apply(x,1,.f,z=strm_lns$Z)
?apply(array, margin, ...)
head(x)
nrow(x)
nrow(strm_lns)
x$z <- strm_lns$Z
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y))
str(x)
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y)) %>% as.matrix()
str(x)
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y))
str(x)
?raster::extract()
head(x)
test <- as.data.frame(x)
x <- raster::extract(conc_l_lev,c(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
nrow(x)
nrow(strm_lns)
c(strm_lns$X,strm_lns$Y)
?raster::extract()
nrow(cbind(strm_lns$X,strm_lns$Y))
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
str(x)
head(x)
x$z <- strm_lns$Z
str(x)
head(x)
.f <- function(x) {
n <- length(x-1)
min(which(x[1:(n-1)]<x[n]))
}
.f <- function(x) {
n <- length(x-1)
min(which(x[1:(n-1)]<x[n]))
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$z <- strm_lns$Z
x %<>% as.matrix()
head(x)
test <- apply(x,1,.f)
warnings()
head(test)
tail(test)
range(test,na.rm=TRUE)
.f <- function(x) {
n <- length(x)
i <- which(x[1:(n-1)]<x[n])
if (length(i)>0) {
return(min(i))
} else {
return(n-1)
}
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$z <- strm_lns$Z
x %<>% as.matrix()
test <- apply(x,1,.f)
head(test)
range(test)
unique(test)
sort(unique(test))
str(conc_l_lev)
.f <- function(x) {
n <- length(x)
i <- which(x[1:(n-1)]<x[n])
if (length(i)>0) {
return(min(i))
} else {
return(n)
}
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$z <- strm_lns$Z
x %<>% as.matrix()
test <- apply(x,1,.f)
sort(unique(test))
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
conc_l_lev <- mw_example_conc_layer_levels()
x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
.f <- function(x) {
n <- length(x)
i <- which(x[1:(n-1)]<x[n])
if (length(i)>0) {
return(min(i))
} else {
return(n)
}
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$z <- strm_lns$Z
x %<>% as.matrix()
apply(x,1,.f)
}
x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
head(x)
range(unique(x))
sort(unique(x))
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_level and z-level (1 record)
.f <- function(x) {
n <- length(x)
i <- which(x[1:(n-1)]<x[n])
if (length(i)>0) {
return(min(i))
} else {
return(n)
}
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %<>% as.matrix()
apply(x,1,.f)
}
nrow(strm_lns)
nrow(test)
x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
nrow(x)
length(x)
document()
