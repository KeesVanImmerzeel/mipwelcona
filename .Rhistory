X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
X <- strm_lns %>% dplyr::filter(TIME==0) %>% as.matrix()
X
mw_read_streamlines <- function(fname) {
n <-
readLines(fname, n = 1) %>% as.numeric()
x <- readLines(fname, n = n + 1)
x <- x[2:length(x)]
i <-
c(
which(x == "PARTICLE_NUMBER"),
which(x == "ILAY"),
which(x == "XCRD."),
which(x == "YCRD."),
which(x == "ZCRD."),
which(x == "TIME(YEARS)")
)
if (length(i) != 6) {
stop("Not all information is included in iff-file.")
}
x <-
utils::read.csv(
fname,
header = FALSE,
sep = "",
dec = ".",
fill = FALSE,
skip = n + 1
)
x <- x[, i]
names(x) <- c("SL_NR", "LAY", "X", "Y", "Z", "TIME")
x %<>% dplyr::select("X", "Y", "Z", "TIME", "LAY", "SL_NR")
return(x)
}
strm_lns <- mw_read_streamlines(fname)
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
head(strm_lns)
X <- strm_lns %>% dplyr::filter(TIME==0) %>% as.matrix()
X
mapply(.nearest_well_fltr, X, MoreArgs=list(well_fltrs=well_fltrs))
test <- mapply(.nearest_well_fltr, X, MoreArgs=list(well_fltrs=well_fltrs))
length(test)
nrow(X)
head(X)
?mapply
?apply
apply(X,1,.nearest_well_fltr,well_fltrs)
test <- apply(X,1,.nearest_well_fltr,well_fltrs)
tail(test)
unique(test,na.rm=TRUE)
head(well_fltrs)
nrow(test)
length(test)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
print(particle)
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
X
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
print(particle)
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
test
head(X)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
#print(particle)
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
print(particle[1])
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
print(particle[["X"]])
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
print(particle[["X"]])
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
print(n)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
head(well_fltrs)
well_fltrs[1,]
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
print(FLTR_NR)
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
head(well_fltrs)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::filter(BK_FLTR >= particle[3] &
OK_FLTR <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
print(well_fltrs)
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
tail(X)
head(test)
head(test,50)
X[10,]
head(well_fltrs)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %>% dplyr::mutate(fltr_length=BK_FLTR-OK_FLTR)
well_fltrs %<>% dplyr::filter(BK_FLTR+0.5*fltr_length >= particle[3] &
OK_FLTR-0.5*fltr_length <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
print(well_fltrs)
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::mutate(fltr_length=BK_FLTR-OK_FLTR)
well_fltrs %<>% dplyr::filter(BK_FLTR+0.5*fltr_length >= particle[3] &
OK_FLTR-0.5*fltr_length <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
print(well_fltrs)
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
range(test,na.rm=true)
range(test,na.rm=TRUE)
is.na(test)
range(is.na(test))
strm_lns <- mw_read_streamlines(fname)
tail(strm_lns)
X <- strm_lns %>% dplyr::filter(TIME==0) %>% as.matrix()
tail(X)
X
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
print(min(well_fltrs$distance))
# Only consider well filters:
#   - matching (approximately) the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::mutate(fltr_length=BK_FLTR-OK_FLTR)
well_fltrs %<>% dplyr::filter(BK_FLTR+0.5*fltr_length >= particle[3] &
OK_FLTR-0.5*fltr_length <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$WL_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
test
well_fltrs
.nearest_well_fltr <- function(particle, well_fltrs, maxdist = 100) {
FLTR_NR <- NA
# Calculate distance of particle to all wells.
X <-
data.frame(particle[1],
particle[2],
well_fltrs$X,
well_fltrs$Y,
FLTR_NR = well_fltrs$FLTR_NR, row.names = NULL) %>% as.matrix()
well_fltrs$distance <- apply(X, 1, .dist)
# Only consider well filters:
#   - matching (approximately) the vertical (Z) level of the particle;
#   - at a distance < mindist
# Select from these filters the filters with the smallest distance to the particle
well_fltrs %<>% dplyr::mutate(fltr_length=BK_FLTR-OK_FLTR)
well_fltrs %<>% dplyr::filter(BK_FLTR+0.5*fltr_length >= particle[3] &
OK_FLTR-0.5*fltr_length <= particle[3] &
distance <= maxdist) %>% dplyr::slice(which.min(distance))
n <- nrow(well_fltrs)
if (n >= 1) {
# There are well filters with top/bottoms matching the vertical (Z) level of the particle.
FLTR_NR <- well_fltrs[1, ]$FLTR_NR
}
return(FLTR_NR)
}
test <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
head(test,20)
unique(test)
range(is.na(test))
nrow(X)
length(test)
head(X)
fltr_nrs <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
df <- data.frame(SL_NR=X$SL_NR, FLTR_NR=fltr_nrs)
str(x)
str(X)
x
head(X)
X[["SL_NR"]]
X["SL_NR"]
X[,"SL_NR"]
df <- data.frame(SL_NR=X[,"SL_NR"], FLTR_NR=fltr_nrs)
head(df)
tail(df)
unique(strm_lns$SL_NR)
unique(df$SL_NR)
mw_create_sl_fltr_table <- function(strm_lns, well_fltrs){
X <- strm_lns %>% dplyr::filter(TIME==0) %>% as.matrix()
fltr_nrs <- apply(X,1,.nearest_well_fltr,well_fltrs, maxdist = 1000)
df <- data.frame(SL_NR=X[,"SL_NR"], FLTR_NR=fltr_nrs)
return(df)
}
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
sl_fltr_table <- mw_create_sl_fltr_table(strm_lns, well_fltrs)
tail(sl_fltr_table)
document()
library(devtools)
load_all()
fname <-
system.file("extdata", "streamlines.iff", package = "mipwelcona")
chk_mw_read_streamlines <- mw_read_streamlines(fname)
fname <-
system.file("extdata", "well_filters.ipf", package = "mipwelcona")
chk_mw_read_well_filters <- mw_read_well_filters(fname)
usethis::use_data(chk_mw_read_streamlines,
chk_mw_read_well_filters,
overwrite = TRUE,
internal = TRUE)
load_all()
library(devtools)
load_all()
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
sl_fltr_table <- mw_create_sl_fltr_table(strm_lns, well_fltrs
)
head(sl_fltr_table)
tail(sl_fltr_table)
chk_sl_fltr_table <- mw_create_sl_fltr_table(chk_mw_read_streamlines, chk_mw_read_well_filters)
head(chk_sl_fltr_table)
tail(chk_sl_fltr_table)
chk_mw_read_streamlines
usethis::use_data(chk_mw_read_streamlines,
chk_mw_read_well_filters,
chk_sl_fltr_table,
overwrite = TRUE,
internal = TRUE)
load_all()
