conc
head(conc)
x <- raster::extract(conc_l,cbind(strm_lns$X,strm_lns$Y))
i <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
head(x)
.f <- function(x) {
return(x[i])
}
.f <- function(x) {
return(x[i])
}
x <- raster::extract(conc_l,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$i <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
test <- apply(x,1,.f)
head(test)
str(test)
head(x)
i
.f <- function(x) {
n <- length(x)
return(x[x[n]])
}
x <- raster::extract(conc_l,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$i <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
test <- apply(x,1,.f)
test
head(i)
i
x <- raster::extract(conc_l,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
head(x)
i
head(x)
x[,i]
test <- x[,i]
names(test)
names(test) <- NULL
head(test)
test %>% as.numeric()
str(test)
mw_conservative_conc <- function(strm_lns, conc_l_lev, conc_l) {
#x: (concentrations, i); i=concentration layer number
.f <- function(x) {
n <- length(x)
return(x[x[n]])
}
x <- raster::extract(conc_l,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$i <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
apply(x,1,.f)
}
x <- mw_conservative_conc(strm_lns, conc_l_lev, conc_l)
x
length(x)
document()
library(devtools)
document()
library(mipwelcona)
document()
document()
library(devtools)
document()
document()
library(devtools)
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
conc_l <- mw_example_concentrations()
conc_l <- mw_example_concentrations()
load_all()
document()
head(strm_lns)
documet()
document()
conc_conserv <- mw_conservative_conc(strm_lns, conc_l_lev, conc_l)
head(strm_lns)
str(conc_l_lev)
conc_l_lev <- mw_example_conc_layer_levels()
str(conc_l)
str(well_fltrs)
conc_conserv <- mw_conservative_conc(strm_lns, conc_l_lev, conc_l)
cons_conserv
mw_conservative_conc(strm_lns, conc_l_lev, conc_l)
conc_conserv <- mw_conservative_conc(strm_lns, conc_l_lev, conc_l)
conc_conserv
document()
library(devtools)
load_all()
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
conc_l_lev <- mw_example_conc_layer_levels()
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
str(x)
head(x)
x$Z <- strm_lns$Z
rec <- x[1,]
rec
?stats
n <- length(rec)
x <- rec[1:(n-1)]
y <- 1:(n-1)
xout <- rec[n]
stats::approx(x,y,xout,method="constant",rule=c(2:2))
stats::approx(x,y,xout,method="constant",rule=c(2:2))$y
.g <- function(rec){
n <- length(rec)
stats::approx(x=rec[1:(n-1)],y=1:(n-1),xout=rec[n],method="constant",rule=c(2:2))$y
}
.g
.g(rec)
rec
rec$Z <- 1
.g(rec)
rec$Z <- -100
.g(rec)
# @export
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_levels and z-level (1 record)
#.f <- function(x) {
#  n <- length(x)
#  i <- which(x[1:(n-1)]<x[n])
#  if (length(i)>0) {
#    return(min(i))
#  } else {
#    return(n)
#  }
#}
.g <- function(rec){
n <- length(rec)
stats::approx(x=rec[1:(n-1)],y=1:(n-1),xout=rec[n],method="constant",rule=c(2:2))$y
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %<>% as.matrix()
apply(x,1,.f)
}
#' @inheritParams mw_create_sl_fltr_table
#' @param conc_l_lev Levels of concentration layers (RasterBrick).
#' @return Numbers of the concentration layer corresponding to all locations (x,y,z) of
#'   streamline trajects (integer vector).
# @examples
#' fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
#' strm_lns <- mw_read_streamlines(fname)
#' conc_l_lev <- mw_example_conc_layer_levels()
#' x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
# @export
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_levels and z-level (1 record)
#.f <- function(x) {
#  n <- length(x)
#  i <- which(x[1:(n-1)]<x[n])
#  if (length(i)>0) {
#    return(min(i))
#  } else {
#    return(n)
#  }
#}
.g <- function(rec){
n <- length(rec)
stats::approx(x=rec[1:(n-1)],y=1:(n-1),xout=rec[n],method="constant",rule=c(2:2))$y
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %<>% as.matrix()
apply(x,1,.f)
}
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_levels and z-level (1 record)
#.f <- function(x) {
#  n <- length(x)
#  i <- which(x[1:(n-1)]<x[n])
#  if (length(i)>0) {
#    return(min(i))
#  } else {
#    return(n)
#  }
#}
.g <- function(rec){
n <- length(rec)
stats::approx(x=rec[1:(n-1)],y=1:(n-1),xout=rec[n],method="constant",rule=c(2:2))$y
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %<>% as.matrix()
apply(x,1,.f)
}
x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_levels and z-level (1 record)
#.f <- function(x) {
#  n <- length(x)
#  i <- which(x[1:(n-1)]<x[n])
#  if (length(i)>0) {
#    return(min(i))
#  } else {
#    return(n)
#  }
#}
.g <- function(rec){
n <- length(rec)
stats::approx(x=rec[1:(n-1)],y=1:(n-1),xout=rec[n],method="constant",rule=c(2:2))$y
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %<>% as.matrix()
apply(x,1,.g)
}
x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
range(x)
unique(x)
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_levels and z-level (1 record)
#.f <- function(x) {
#  n <- length(x)
#  i <- which(x[1:(n-1)]<x[n])
#  if (length(i)>0) {
#    return(min(i))
#  } else {
#    return(n)
#  }
#}
.g <- function(rec){
n <- length(rec)
stats::approx(x=rec[1:(n-1)],y=1:(n-1),xout=rec[n],method="constant",rule=c(2:2))$y
}
x <- raster::extract(conc_l_lev,cbind(strm_lns$X,strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %>% as.matrix() %>% apply(1,.g)
}
x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
unique(x)
?approx
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_levels and z-level (1 record)
#.f <- function(x) {
#  n <- length(x)
#  i <- which(x[1:(n-1)]<x[n])
#  if (length(i)>0) {
#    return(min(i))
#  } else {
#    return(n)
#  }
#}
.g <- function(rec) {
n <- length(rec)-1
stats::approx(
x = rec[1:n],
y = 1:n,
xout = rec[n+1],
method = "constant",
rule = c(2:2)
)$y
}
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_levels and z-level (1 record)
#.f <- function(x) {
#  n <- length(x)
#  i <- which(x[1:(n-1)]<x[n])
#  if (length(i)>0) {
#    return(min(i))
#  } else {
#    return(n)
#  }
#}
.g <- function(rec) {
n <- length(rec)-1
stats::approx(
x = rec[1:n],
y = 1:n,
xout = rec[n+1],
method = "constant",
rule = c(2:2)
)$y
}
x <-
raster::extract(conc_l_lev, cbind(strm_lns$X, strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %>% as.matrix() %>% apply(1, .g)
}
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
#x conc_l_levels and z-level (1 record)
#.f <- function(x) {
#  n <- length(x)
#  i <- which(x[1:(n-1)]<x[n])
#  if (length(i)>0) {
#    return(min(i))
#  } else {
#    return(n)
#  }
#}
.g <- function(rec) {
n <- length(rec)-1
stats::approx(
x = rec[1:n],
y = 1:n,
xout = rec[n+1],
method = "constant",
rule = c(2:2)
)$y
}
x <-
raster::extract(conc_l_lev, cbind(strm_lns$X, strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %>% as.matrix() %>% apply(1, .g)
}
x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
unique(x)
x <-
raster::extract(conc_l_lev, cbind(strm_lns$X, strm_lns$Y))
head(x)
?apply
ncol(x)
?approx
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
.g <- function(x) {
n <- length(x)-1
stats::approx(
x[1:n],
y=1:n,
xout = x[n+1],
method = "constant",
rule = c(2:2)
)$y
}
x <-
raster::extract(conc_l_lev, cbind(strm_lns$X, strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %>% as.matrix() %>% apply(1, .g)
}
x <- .mw_get_conc_layer_nr(strm_lns, conc_l_lev)
unique(x)
head(x)
use_package("stats")
.mw_get_conc_layer_nr <- function(strm_lns, conc_l_lev) {
.f <- function(x) {
n <- length(x) - 1
stats::approx(
x[1:n],
y = 1:n,
xout = x[n + 1],
method = "constant",
rule = c(2:2)
)$y
}
x <-
raster::extract(conc_l_lev, cbind(strm_lns$X, strm_lns$Y)) %>% as.data.frame()
x$Z <- strm_lns$Z
x %>% as.matrix() %>% apply(1, .f)
}
library(devtools)
document()
library(devtools)
document()
documentI()
document()
document()
document()
load_all()
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
# Read well filters.`
fname <- system.file("extdata","well_filters.ipf",package="mipwelcona")
well_fltrs <- mw_read_well_filters(fname)
# Read Initial concentrations of different layers in the subsoil (9 raster layers).
conc_l <- mw_example_concentrations()
# Read concentration layer levels (8 rasters layers).
conc_l_lev <- mw_example_conc_layer_levels()
head(strm_lns)
library(dplyr)
head(strm_lns)
library(magrittr)
data <- strm_lns %>% dplyr::filter(SL_NR==1)
head(data)
tail(data)
?dplyr::mutate
data %>% dplyr::mutate(dist=(dplyr::lag(X))
)
data %>% dplyr::mutate(dist=(dplyr::lag(X)-X))
data %>% dplyr::mutate(dist=(dplyr::lag(X)-X)^2)
24^2
data %>% dplyr::mutate(dist=((dplyr::lag(X)-X)^2))
data %>% dplyr::mutate(dist=((dplyr::lag(X)-X)^2)+(dplyr::lag(Y)-Y)^2)
data %>% dplyr::mutate(dist=((dplyr::lag(X)-X)^2)+(dplyr::lag(Y)-Y)^2+(dplyr::lag(Z)-Z)^2)
data %>% dplyr::mutate(dist=((dplyr::lag(X)-X)^2)+(dplyr::lag(Y)-Y)^2+(dplyr::lag(Z)-Z)^2)
data %>% dplyr::mutate(dist = ( (dplyr::lag(X) - X) ^ 2 +
(dplyr::lag(Y) - Y) ^ 2 +
(dplyr::lag(Z) - Z) ^ 2) )
data %>% dplyr::mutate(dist = sqrt( (dplyr::lag(X) - X) ^ 2 +
(dplyr::lag(Y) - Y) ^ 2 +
(dplyr::lag(Z) - Z) ^ 2) )
data %>% dplyr::mutate(DIST = sqrt( (dplyr::lag(X) - X) ^ 2 +
(dplyr::lag(Y) - Y) ^ 2 +
(dplyr::lag(Z) - Z) ^ 2) )
dplyr::lag
?dplyr::lag
data %>% dplyr::mutate(DIST = sqrt( (dplyr::lag(X, default=X) - X) ^ 2 +
(dplyr::lag(Y, default=Y) - Y) ^ 2 +
(dplyr::lag(Z, default=Z) - Z) ^ 2) )
data %>% dplyr::mutate(DIST = sqrt( (dplyr::lag(X, default=X[1]) - X) ^ 2 +
(dplyr::lag(Y, default=Y[1]) - Y) ^ 2 +
(dplyr::lag(Z, default=Z[1]) - Z) ^ 2) )
.f <- function(data) {
data %>% dplyr::mutate(DIST = sqrt( (dplyr::lag(X, default=X[1]) - X) ^ 2 +
(dplyr::lag(Y, default=Y[1]) - Y) ^ 2 +
(dplyr::lag(Z, default=Z[1]) - Z) ^ 2) )
}
data <- strm_lns %>% dplyr::filter(SL_NR==1)
.f(data)
strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f)
.f <- function(data,...) {
data %>% dplyr::mutate(DIST = sqrt( (dplyr::lag(X, default=X[1]) - X) ^ 2 +
(dplyr::lag(Y, default=Y[1]) - Y) ^ 2 +
(dplyr::lag(Z, default=Z[1]) - Z) ^ 2) )
}
strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f)
test <- strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f)
tail(test)
test <- strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f) %>% dplyr::group_modify(cumsum)
str(test)
head(test)
?cumsum
test$DIST <- cumsum(test$DIST)
tail(test)
test <- strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f) %>%
dplyr::transmutate(DIST = cumsum(DIST))
test <- strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f) %>%
dplyr::transmute(DIST = cumsum(DIST))
head(test)
tail(test)
tail(test,100)
test <- strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f)
head(test)
test <- strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f) %>%
dplyr::mutate(DIST = cumsum(DIST))
head(test)
head(test,100)
test <- strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f)
head(test)
sum(test$DIST)
test <- strm_lns %>% dplyr::group_by(SL_NR) %>% dplyr::group_modify(.f) %>% dplyr::mutate(DIST = cumsum(DIST)) %>% ungroup()
head(test)
mw_read_streamlines <- function(fname) {
n <-
readLines(fname, n = 1) %>% as.numeric()
x <- readLines(fname, n = n + 1)
x <- x[2:length(x)]
i <-
c(
which(x == "PARTICLE_NUMBER"),
which(x == "ILAY"),
which(x == "XCRD."),
which(x == "YCRD."),
which(x == "ZCRD."),
which(x == "TIME(YEARS)")
)
if (length(i) != 6) {
stop("Not all information is included in iff-file.")
}
x <-
utils::read.csv(
fname,
header = FALSE,
sep = "",
dec = ".",
fill = FALSE,
skip = n + 1
)
x <- x[, i]
names(x) <- c("SL_NR", "LAY", "X", "Y", "Z", "TIME")
x %<>% dplyr::select("X", "Y", "Z", "TIME", "LAY", "SL_NR") %>% dplyr::distinc(X, Y, Z, TIME)
return(x)
}
head(x, 20)
strm_lns <- mw_read_streamlines(fname)
# Read streamlines.`
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
mw_read_streamlines <- function(fname) {
n <-
readLines(fname, n = 1) %>% as.numeric()
x <- readLines(fname, n = n + 1)
x <- x[2:length(x)]
i <-
c(
which(x == "PARTICLE_NUMBER"),
which(x == "ILAY"),
which(x == "XCRD."),
which(x == "YCRD."),
which(x == "ZCRD."),
which(x == "TIME(YEARS)")
)
if (length(i) != 6) {
stop("Not all information is included in iff-file.")
}
x <-
utils::read.csv(
fname,
header = FALSE,
sep = "",
dec = ".",
fill = FALSE,
skip = n + 1
)
x <- x[, i]
names(x) <- c("SL_NR", "LAY", "X", "Y", "Z", "TIME")
x %<>% dplyr::select("X", "Y", "Z", "TIME", "LAY", "SL_NR") %>% dplyr::distinct(X, Y, Z, TIME, .keep_all = TRUE)
return(x)
}
# Read streamlines.`
fname <- system.file("extdata","streamlines.iff",package="mipwelcona")
strm_lns <- mw_read_streamlines(fname)
head(strm_lns)
load_all()
